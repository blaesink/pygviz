class Tree:
    """A Tree is for hierarchy
    :param: top -- top level node for this Tree
    :param: layers -- lists of strings that are layers each layer is a child to
    the layer above (top is the highest layer)
    """
    def __init__(self, top: str):
        self.top = top
        self.layers = []

    def add_layer(self, nodes: list):
        """Adds a layer to the tree"""
        assert isinstance(nodes, list)
        self.layers.append(nodes)

    def dict(self):
        """Creates a dict representation of the Tree"""
        d = {}
        d["top"] = self.top
        for l in self.layers:
            d[f"layer_{self.layers.index(l)}"] = l
        return d

    def generate(self, digraph=True):
        """Generates the dot file for the tree
        returns: a long string that can be written to a .dot file
        that then gets generated by graphviz in a TODO function.
        """
        if digraph:
            s = "digraph{\n"
        else:
            s = "graph{\n"
