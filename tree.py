class Tree:
    """A Tree is for hierarchy
    :param: root -- root level node for this Tree
    :param: layers -- lists of strings that are layers each layer is a child to
    the layer above (root is the highest layer)
    """
    def __init__(self, root: str):
        self.root = root
        self.layers = []

    def add_layer(self, nodes: list):
        """Adds a layer to the tree
        :param: nodes: a list of lists that has N elements equal to the
        number of elements on the layer above.
        """
        if len(self.layers) == 0:
            self.layers.append(nodes)
        else:
            assert len(nodes) == len(self.layers[-1])
            self.layers.append(nodes)

    def dict(self):
        """Creates a dict representation of the Tree"""
        d = {}
        d["root"] = self.root
        for l in self.layers:
            d[f"layer_{self.layers.index(l)}"] = l
        return d

    def generate(self, digraph=True):
        """Generates the dot file for the tree
        returns: a long string that can be written to a .dot file
        that then gets generated by graphviz in a TODO function.
        """
        if digraph:
            s = "digraph{\n"
        else:
            s = "graph{\n"

        s += "}"
        return s

    def show(self):
        """This will merge into generate(), just a way to see that things
        are looking as expected"""
        current_node = self.root
